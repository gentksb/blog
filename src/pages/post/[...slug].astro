---
import type { GetStaticPaths } from "astro"
import { type CollectionEntry, getCollection } from "astro:content"
import BlogPost from "@layouts/BlogPost.astro"
import {
  MdxH2,
  MdxH3,
  MdxH4,
  MdxParagraph,
  MdxBlockQuote,
  MdxA,
  MdxTable,
  MdxStrong
} from "@components/mdx/mdxReplacer"
import MdxPicture from "@components/mdx/MdxPicture.astro"
// descriptionレンダリング用
import { experimental_AstroContainer as AstroContainer } from "astro/container"
import reactRenderer from "@astrojs/react/server.js"
import mdxRenderer from "astro/jsx/server.js"
import sanitizeHtml from "sanitize-html"

const container = await AstroContainer.create()
container.addServerRenderer({ name: "mdx", renderer: mdxRenderer })
container.addServerRenderer({ name: "react", renderer: reactRenderer })
container.addClientRenderer({
  name: "@astrojs/react",
  entrypoint: "@astrojs/react/client.js"
})

export const getStaticPaths: GetStaticPaths = async () => {
  const posts = await getCollection("post")
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post
  }))
}
type Props = CollectionEntry<"post">

const post = Astro.props
const { Content } = await post.render()

// descriptionレンダリング
const contentString = await container.renderToString(Content)
const description = sanitizeHtml(contentString, {
  allowedTags: []
}).slice(0, 100)
---

<BlogPost {...post} description={description}>
  <Content
    components={{
      h2: MdxH2,
      h3: MdxH3,
      h4: MdxH4,
      p: MdxParagraph,
      blockquote: MdxBlockQuote,
      a: MdxA,
      table: MdxTable,
      strong: MdxStrong,
      img: MdxPicture
    }}
  />
</BlogPost>
